<?xml version="1.0"?>
<definitions name="AtomiaDNS"
		targetNamespace="urn:Atomia::DNS::Server"
		xmlns:tns="urn:Atomia::DNS::Server"
		xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
		xmlns:xsd="http://www.w3.org/2001/XMLSchema"
		xmlns="http://schemas.xmlsoap.org/wsdl/">

	<types>
		<xsd:schema targetNamespace="urn:Atomia::DNS::Server"
			xmlns="urn:Atomia::DNS::Server" elementFormDefault="qualified">

			<xsd:complexType name="InvalidParametersError">
				<xsd:sequence>
					<xsd:element name="subtype" type="xsd:string"/>
					<xsd:element name="description" type="xsd:string"/>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:element name="InvalidParametersErrorFault" type="InvalidParametersError" />

			<xsd:complexType name="SystemError">
				<xsd:sequence>
					<xsd:element name="subtype" type="xsd:string"/>
					<xsd:element name="description" type="xsd:string"/>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:element name="SystemErrorFault" type="SystemError" />

			<xsd:complexType name="InternalError">
				<xsd:sequence>
					<xsd:element name="subtype" type="xsd:string"/>
					<xsd:element name="description" type="xsd:string"/>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:element name="InternalErrorFault" type="InternalError" />

			<xsd:complexType name="LogicalError">
				<xsd:sequence>
					<xsd:element name="subtype" type="xsd:string"/>
					<xsd:element name="description" type="xsd:string"/>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:element name="LogicalErrorFault" type="LogicalError" />

			<xsd:complexType name="xsdAtomiaStringArray">
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="item" type="xsd:string" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="xsdAtomiaIntArray">
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="item" type="xsd:int" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="xsdAtomiaLongArray">
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="item" type="xsd:long" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaMetadataArray">
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="metadataEntry" type="atomiaMetadata" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaResourceRecord">
				<xsd:annotation><xsd:documentation>
atomiaResourceRecord is a struct with the following members:

|| Member || Type || Description ||
| id | bigint | the id of the record |
| label | string | the label of the record |
| class | string | the DNS class, almost always IN |
| ttl | int | the time in seconds which it is valid to cache the record for |
| type | string | the DNS type of the record |
| rdata | string | the data of the record, an example for MX would be '10 mailserver.acompany.com.' |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:long"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="label" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="class" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="ttl" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="type" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="rdata" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaRecordArray">
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="resourcerecord" type="atomiaResourceRecord" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaHostname">
				<xsd:annotation><xsd:documentation>
atomiaHostname is a struct with the following members:
|| Member || Type || Description ||
| zone | string | the name of the zone |
| label | string | the name of the label |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="zone" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="label" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaHostnameArray">
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="hostname" type="atomiaHostname" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaMetadata">
				<xsd:annotation><xsd:documentation>
atomiaMetadata is a struct with the following members:
|| Member || Type || Description ||
| key | string | the metadata key |
| value | string | the metadata value |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="key" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="value" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaLabel">
				<xsd:annotation><xsd:documentation>
atomiaLabel is a struct with the following members:
|| Member || Type || Description ||
| name | string | the name of the label |
| records | atomiaRecordArray | an array of resourcerecords |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="name" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="records" type="atomiaRecordArray"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaZone">
				<xsd:annotation><xsd:documentation>atomiaZone is an array of atomiaLabel-structs.</xsd:documentation></xsd:annotation>
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="label" type="atomiaLabel" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaFindResponse">
				<xsd:annotation><xsd:documentation>
atomiaFindResponse is a struct with the following members:
|| Member || Type || Description ||
| total | int | the number of zones matching the query |
| zones | string[] | the zone names |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="1" name="total" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="zones" type="xsdAtomiaStringArray"/>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaSlaveZones">
				<xsd:annotation><xsd:documentation>atomiaSlaveZones is an array of atomiaSlaveZoneItem-structs.</xsd:documentation></xsd:annotation>
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="zone" type="atomiaSlaveZoneItem" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaSlaveZoneItem">
				<xsd:annotation><xsd:documentation>
atomiaSlaveZoneItem is a struct with the following members:
|| Member || Type || Description ||
| name | string | the name of the slave zone |
| master | string | the ip-address of the master |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="zone" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="master" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaZoneStruct">
				<xsd:annotation><xsd:documentation>
atomiaZoneStruct is a struct with the following members:
|| Member || Type || Description ||
| id | int | id of the zone |
| name | string | name of the zone |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:long"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="name" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaZones">
				<xsd:annotation><xsd:documentation>atomiaZones is an array of atomiaZoneStruct-structs.</xsd:documentation></xsd:annotation>
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="zone" type="atomiaZoneStruct" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaChangedZone">
				<xsd:annotation><xsd:documentation>
atomiaChangedZone is a struct with the following members:
|| Member || Type || Description ||
| id | int | the id of the change-row |
| name | string | the name of the zone this change-row applies to |
| changetime | int | he unix timestamp of this change (will be used as serial in SOA) |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:long"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="name" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="changetime" type="xsd:int"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaChanges">
				<xsd:annotation><xsd:documentation>atomiaChanges is an array of atomiaChangedZone-structs.</xsd:documentation></xsd:annotation>
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="changedzone" type="atomiaChangedZone" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaTransferAllowed">
				<xsd:annotation><xsd:documentation>
atomiaTransferAllowed is a struct with the following members:
|| Member || Type || Description ||
| zonename | string | the name of the zone for which transfers are allowed, or * to allow for all zones |
| allowed_ip | string | the IP to allow transfers from |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="allowed_ip" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaAllowedTransfers">
				<xsd:annotation><xsd:documentation>atomiaAllowedTransfers is an array of atomiaTransferAllowed-structs.</xsd:documentation></xsd:annotation>
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="allowedtransfers" type="atomiaTransferAllowed" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaBinaryZone">
				<xsd:annotation><xsd:documentation>
atomiaBinaryZone is a struct with the following members:
|| Member || Type || Description ||
| name | string | the name of the zone |
| binaryzone | string | a string representation of the zone, will be sent base64 encoded |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="name" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="binaryzone" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaBinaryZoneArray">
				<xsd:annotation><xsd:documentation>atomiaBinaryZoneArray is an array of atomiaBinaryZone-structs.</xsd:documentation></xsd:annotation>
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="item" type="atomiaBinaryZone" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaKeySet">
				<xsd:annotation><xsd:documentation>
atomiaKeySet is a struct with the following members:
|| Member || Type || Description ||
| id | int | the id of the key |
| algorithm | string | the algorithm of the key |
| activated | int | 0 if the key is inactive and 1 if it is active |
| keysize | int | the size of the key in bits |
| keytype | string | ZSK or KSK |
| activated_at | string | the date of the key activation or empty if not activated |
| deactivated_at | string | the date of the key deactivation or empty if not deactivated |
| keydata | string | the private key in Private-key-format v1.2 |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="algorithm" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="activated" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="keysize" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="keytype" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="activated_at" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="deactivated_at" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="keydata" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaDSSet">
				<xsd:annotation><xsd:documentation>
atomiaDSSet is a struct with the following members:
|| Member || Type || Description ||
| digest | string | the digest of a KSK as defined in the RR format of a DS record |
| digestType | int | the digest algorithm used to create the digest, as defined in the RR format of a DS record |
| alg | int | the algorithm value of the KSK DNSKEY record that this digest applies to |
| keyTag | int | the keytag of the KSK DNSKEY record that this digest applies to |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="digest" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="digestType" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="alg" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="keyTag" type="xsd:int"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaExternalKeySet">
				<xsd:annotation><xsd:documentation>
atomiaExternalKeySet is a struct with the following members:
|| Member || Type || Description ||
| id | int | the id of the key |
| keydata | string | the key in DNSKEY RR format |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="keydata" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="atomiaZSKInfo">
				<xsd:annotation><xsd:documentation>
atomiaZSKInfo is a struct with the following members:
|| Member || Type || Description ||
| id | int | the id of the key |
| activated | int | 0 if the key is inactive and 1 if it is active |
| created_at | string | the date of the key creation |
| activated_at | string | the date of the key activation or empty if not activated |
| deactivated_at | string | the date of the key deactivation or empty if not deactivated |
| created_ago_seconds | int | the number of seconds since the key creation |
| deactivated_ago_seconds | int | the number of seconds since the key deactivation |
| max_ttl | int | the maximum TTL of all records in this instance of Atomia DNS |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="activated" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="created_at" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="activated_at" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="deactivated_at" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="created_ago_seconds" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="deactivated_ago_seconds" type="xsd:int"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="max_ttl" type="xsd:int"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="changedTSIGKeys">
				<xsd:annotation><xsd:documentation>
changedTSIGKeys is a struct with the following members:
|| Member || Type || Description ||
| id | int | the id of the change-row |
| name | string | the name of the tsig key this change-row applies to |
| changetime | int | he unix timestamp of this change |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:long"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="name" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="changetime" type="xsd:int"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:complexType name="TSIGChanges">
				<xsd:annotation><xsd:documentation>TSIGChanges is an array of changedTSIGKeys-structs.</xsd:documentation></xsd:annotation>
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="changedtsig" type="changedTSIGKeys" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaTSIGKeys">
				<xsd:annotation><xsd:documentation>atomiaTSIGKeys is an array of atomiaTSIGKeyItem-structs.</xsd:documentation></xsd:annotation>
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="tsigkey" type="atomiaTSIGKeyItem" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="atomiaTSIGKeyItem">
				<xsd:annotation><xsd:documentation>
atomiaTSIGKeyItem is a struct with the following members:
|| Member || Type || Description ||
| name | string | the name of the tsig key |
| secret | string | the secret hash of the tsig key |
| algorithm | string | the algorithm used for the hash |
{excerpt:hidden=true}{excerpt}
				</xsd:documentation></xsd:annotation>
				<xsd:all>
					<xsd:element minOccurs="1" maxOccurs="1" name="name" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="secret" type="xsd:string"/>
					<xsd:element minOccurs="1" maxOccurs="1" name="algorithm" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>

			<xsd:element name="GetUpdatesDisabled">
				<xsd:complexType>
					<xsd:all />
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetUpdatesDisabledResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="disabled" type="xsd:int"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="ReloadAllZones">
				<xsd:complexType>
					<xsd:all />
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="ReloadAllZonesResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="ReloadAllSlaveZones">
				<xsd:complexType>
					<xsd:all />
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="ReloadAllSlaveZonesResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetAllZones">
				<xsd:complexType>
					<xsd:all />
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetAllZonesResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zones" type="atomiaZones"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="SetUpdatesDisabled">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="disabled" type="xsd:int"><xsd:annotation><xsd:documentation>1 if updates are to be disabled and 0 if not</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="SetUpdatesDisabledResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkUpdated">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="changeid" type="xsd:long"><xsd:annotation><xsd:documentation>the id of the change-row</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="changestatus" type="xsd:string"><xsd:annotation><xsd:documentation>ERROR or OK</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="errormessage" type="xsd:string"><xsd:annotation><xsd:documentation>error message to set if cstatus is ERROR</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkUpdatedResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkUpdatedBulk">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="changeids" type="xsdAtomiaLongArray"><xsd:annotation><xsd:documentation>the ids of the change-rows</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="changestatuses" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>ERROR or OK for every change row</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="errormessages" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>error messages to set if cstatus is ERROR</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkUpdatedBulkResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkAllUpdatedExcept">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zone" type="xsd:string"><xsd:annotation><xsd:documentation>zone to mark all updates as updated for</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="changeid" type="xsd:long"><xsd:annotation><xsd:documentation>the id of the change-row to keep</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkAllUpdatedExceptResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkAllUpdatedExceptBulk">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zones" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>zones to mark all updates as updated for</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="changeids" type="xsdAtomiaIntArray"><xsd:annotation><xsd:documentation>the ids of the change-rows to keep</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkAllUpdatedExceptBulkResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkSlaveZoneUpdated">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="changeid" type="xsd:long"><xsd:annotation><xsd:documentation>the id of the change-row</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="changestatus" type="xsd:string"><xsd:annotation><xsd:documentation>ERROR or OK</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="errormessage" type="xsd:string"><xsd:annotation><xsd:documentation>error message to set if cstatus is ERROR</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkSlaveZoneUpdatedResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetChangedZones">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameserver" type="xsd:string"><xsd:annotation><xsd:documentation>the servername to fetch changes for</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetChangedZonesResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="changes" type="atomiaChanges"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetChangedZonesBatch">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameserver" type="xsd:string"><xsd:annotation><xsd:documentation>the servername to fetch changes for</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="num" type="xsd:int"><xsd:annotation><xsd:documentation>the maximum number of changes to return</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetChangedZonesBatchResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="changes" type="atomiaChanges"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetChangedSlaveZones">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameserver" type="xsd:string"><xsd:annotation><xsd:documentation>the servername to fetch changes for</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetChangedSlaveZonesResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="changes" type="atomiaChanges"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteNameserver">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameserver" type="xsd:string"><xsd:annotation><xsd:documentation>the servername to remove as a subscriber</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteNameserverResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddNameserver">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameserver" type="xsd:string"><xsd:annotation><xsd:documentation>the servername to add as a subscriber</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameservergroup" type="xsd:string"><xsd:annotation><xsd:documentation>the nameserver group that this nameserver should subscribe to changes for</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddNameserverResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetNameserverGroup">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zone" type="xsd:string"><xsd:annotation><xsd:documentation>the zone to get the nameserver group for</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetNameserverGroupResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="stringvalue" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetNameserver">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameserver" type="xsd:string"><xsd:annotation><xsd:documentation>the servername to get information for</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetNameserverResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="stringvalue" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddNameserverGroup">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="groupname" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the nameserver group</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddNameserverGroupResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteNameserverGroup">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="groupname" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the nameserver group</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteNameserverGroupResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="SetNameserverGroup">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zone" type="xsd:string"><xsd:annotation><xsd:documentation>the zone to set the nameserver group for</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameservergroup" type="xsd:string"><xsd:annotation><xsd:documentation>the nameserver group that should host the zone</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="SetNameserverGroupResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteDnsRecordsBulk">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zones" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>an array with the name of the zones to remove records from</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="records" type="atomiaRecordArray"><xsd:annotation><xsd:documentation>the records to remove, everything except id must match for a record to be deleted</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteDnsRecordsBulkResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>
			
			<xsd:element name="CopyDnsLabelBulk">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="sourcezone" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the source zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="label" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the label to copy</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="destinationzones" type="atomiaHostnameArray"><xsd:annotation><xsd:documentation>an array of the hostnames to copy the label in the source zone to</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="CopyDnsLabelBulkResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="CopyDnsZoneBulk">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="sourcezone" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the source zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="destinationzones" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>an array of the zone names to copy the source zone to</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="CopyDnsZoneBulkResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="SetDnsRecordsBulk">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zones" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>an array containing the names of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="records" type="atomiaRecordArray"><xsd:annotation><xsd:documentation>the resourcerecords to set for the zones</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="SetDnsRecordsBulkResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="RestoreZone">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameservergroup" type="xsd:string"><xsd:annotation><xsd:documentation>the nameserver group that should host the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="zone" type="atomiaZone"><xsd:annotation><xsd:documentation>the zone to restore</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="RestoreZoneResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetZone">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetZoneResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zone" type="atomiaZone"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetZoneMetadata">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetZoneMetadataResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="unbounded" name="metadata" type="atomiaMetadataArray"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="SetZoneMetadata">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="keys" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>an array of all metadata keys to set for the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="values" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>an array of all metadata values to set for the zone in the same order as the keys</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="SetZoneMetadataResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetZoneBulk">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zones" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>the name of the zones</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetZoneBulkResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="binaryzones" type="atomiaBinaryZoneArray"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetSlaveZone">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetSlaveZoneResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="slavezones" type="atomiaSlaveZones"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetLabels">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetLabelsResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="stringarray" type="xsdAtomiaStringArray"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetDnsRecords">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="label" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the label</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetDnsRecordsResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="resourcerecords" type="atomiaRecordArray"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddDnsRecords">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="records" type="atomiaRecordArray"><xsd:annotation><xsd:documentation>an array of the records to add</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddDnsRecordsResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="intarray" type="xsdAtomiaIntArray"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="EditDnsRecords">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="records" type="atomiaRecordArray"><xsd:annotation><xsd:documentation>an array of the records to change</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="EditDnsRecordsResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="SetDnsRecords">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="records" type="atomiaRecordArray"><xsd:annotation><xsd:documentation>an array of the records to change, id is not used</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="SetDnsRecordsResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteDnsRecords">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="records" type="atomiaRecordArray"><xsd:annotation><xsd:documentation>an array of the records to delete, only id is needed</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteDnsRecordsResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddZone">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonettl" type="xsd:int"><xsd:annotation><xsd:documentation>the ttl of the SOA-record and the NS-records</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="mname" type="xsd:string"><xsd:annotation><xsd:documentation>the SOA mname field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="rname" type="xsd:string"><xsd:annotation><xsd:documentation>the SOA rname field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="refresh" type="xsd:int"><xsd:annotation><xsd:documentation>the SOA refresh field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="retry" type="xsd:int"><xsd:annotation><xsd:documentation>the SOA retry field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="expire" type="xsd:int"><xsd:annotation><xsd:documentation>the SOA expire field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="minimum" type="xsd:int"><xsd:annotation><xsd:documentation>the SOA minimum field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameservers" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>an array of the hostnames of the nameservers for the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameservergroup" type="xsd:string"><xsd:annotation><xsd:documentation>the nameserver group that should host the zone</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddZoneResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddSlaveZone">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="master_ip" type="xsd:string"><xsd:annotation><xsd:documentation>the IP-address of the master</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameservergroup" type="xsd:string"><xsd:annotation><xsd:documentation>the nameserver group that should host the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="tsig_keyname" type="xsd:string"><xsd:annotation><xsd:documentation>the TSIG keyname</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="tsig_secret" type="xsd:string"><xsd:annotation><xsd:documentation>the TSIG secret</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddSlaveZoneResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="EditZone">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonettl" type="xsd:int"><xsd:annotation><xsd:documentation>the ttl of the SOA-record and the NS-records</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="mname" type="xsd:string"><xsd:annotation><xsd:documentation>the SOA mname field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="rname" type="xsd:string"><xsd:annotation><xsd:documentation>the SOA rname field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="refresh" type="xsd:int"><xsd:annotation><xsd:documentation>the SOA refresh field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="retry" type="xsd:int"><xsd:annotation><xsd:documentation>the SOA retry field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="expire" type="xsd:int"><xsd:annotation><xsd:documentation>the SOA expire field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="minimum" type="xsd:int"><xsd:annotation><xsd:documentation>the SOA minimum field</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameservers" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>an array of the hostnames of the nameservers for the added zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameservergroup" type="xsd:string"><xsd:annotation><xsd:documentation>the nameserver group that should host the zone</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="EditZoneResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteZone">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteZoneResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteSlaveZone">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteSlaveZoneResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AllowZoneTransfer">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone, or * to allow globally</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="allowed_ip" type="xsd:string"><xsd:annotation><xsd:documentation>the IP to allow zone transfers from</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AllowZoneTransferResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetAllowedZoneTransfer">
				<xsd:complexType>
					<xsd:all />
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetAllowedZoneTransferResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="allowedtransfers" type="atomiaAllowedTransfers"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteAllowedZoneTransfer">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone, or * to remove global allows</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="allowed_ip" type="xsd:string"><xsd:annotation><xsd:documentation>the IP to remove allowed zone transfers from</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteAllowedZoneTransferResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetZoneBinary">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zone" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetZoneBinaryResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="binaryzone" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="RestoreZoneBinary">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonename" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameservergroup" type="xsd:string"><xsd:annotation><xsd:documentation>the nameserver group that should host the zone</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="zone" type="xsd:string"><xsd:annotation><xsd:documentation>the base64 encoded value of the zone to restore</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="RestoreZoneBinaryResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="RestoreZoneBulk">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zonenames" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>the name of the zones</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameservergroup" type="xsd:string"><xsd:annotation><xsd:documentation>the nameserver group that should host the zones</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="zones" type="xsdAtomiaStringArray"><xsd:annotation><xsd:documentation>an array of base64 encoded values each containing a zone to restore</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="RestoreZoneBulkResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetDNSSECKeys">
				<xsd:complexType>
					<xsd:all />
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetDNSSECKeysResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="keyset" type="atomiaKeySet"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetDNSSECKeysDS">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zone" type="xsd:string"><xsd:annotation><xsd:documentation>the zone to generate DS records for</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetDNSSECKeysDSResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="keyset" type="atomiaDSSet"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetExternalDNSSECKeys">
				<xsd:complexType>
					<xsd:all />
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetExternalDNSSECKeysResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="keyset" type="atomiaExternalKeySet"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddDNSSECKey">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="algorithm" type="xsd:string"><xsd:annotation><xsd:documentation>the algorithm of the key</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="keysize" type="xsd:int"><xsd:annotation><xsd:documentation>the size of the key in bits</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="keytype" type="xsd:string"><xsd:annotation><xsd:documentation>ZSK or KSK</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="activated" type="xsd:int"><xsd:annotation><xsd:documentation>1 if the key should be active or 0 if it is to be inactive</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddDNSSECKeyResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="keyid" type="xsd:int"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddExternalDNSSECKey">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="keydata" type="xsd:string"><xsd:annotation><xsd:documentation>the KSK in DNSKEY RR format</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddExternalDNSSECKeyResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="keyid" type="xsd:int"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="ActivateDNSSECKey">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="keyid" type="xsd:int"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="ActivateDNSSECKeyResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>


			<xsd:element name="DeactivateDNSSECKey">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="keyid" type="xsd:int"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeactivateDNSSECKeyResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteDNSSECKey">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="keyid" type="xsd:int"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteDNSSECKeyResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteExternalDNSSECKey">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="keyid" type="xsd:int"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteExternalDNSSECKeyResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetDNSSECZSKInfo">
				<xsd:complexType>
					<xsd:all />
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetDNSSECZSKInfoResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zskinfo" type="atomiaZSKInfo"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddAccount">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="email" type="xsd:string"><xsd:annotation><xsd:documentation>the username of the account (email)</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="password" type="xsd:string"><xsd:annotation><xsd:documentation>the password of the account</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddAccountResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="EditAccount">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="email" type="xsd:string"><xsd:annotation><xsd:documentation>the username of the account (email)</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="password" type="xsd:string"><xsd:annotation><xsd:documentation>the password of the account</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="EditAccountResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteAccount">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="email" type="xsd:string"><xsd:annotation><xsd:documentation>the username of the account (email)</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteAccountResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetNameserverGroups">
				<xsd:complexType>
					<xsd:all />
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetNameserverGroupsResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="stringarray" type="xsdAtomiaStringArray"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="FindZones">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="email" type="xsd:string"><xsd:annotation><xsd:documentation>the username of the account (email)</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="pattern" type="xsd:string"><xsd:annotation><xsd:documentation>the pattern to search for with SQL LIKE semantics</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="count" type="xsd:int"><xsd:annotation><xsd:documentation>the max number of zones to return</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="offset" type="xsd:int"><xsd:annotation><xsd:documentation>the offset of the first zone to return</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="FindZonesResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="zones" type="atomiaFindResponse"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddTSIGKey">
				<xsd:complexType>
					<xsd:all />
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="AddTSIGKeyResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetChangedTSIGKeys">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="nameserver" type="xsd:string"><xsd:annotation><xsd:documentation>the servername to fetch changes for</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetChangedTSIGKeysResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="changes" type="atomiaChanges"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="GetTSIGKey">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="tsigkey_name" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the tsig key</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>
			
			<xsd:element name="GetTSIGKeyResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="tsigkeys" type="atomiaTSIGKeys"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkTSIGKeyUpdated">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="changeid" type="xsd:long"><xsd:annotation><xsd:documentation>the id of the change-row</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="changestatus" type="xsd:string"><xsd:annotation><xsd:documentation>ERROR or OK</xsd:documentation></xsd:annotation></xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="errormessage" type="xsd:string"><xsd:annotation><xsd:documentation>error message to set if cstatus is ERROR</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="MarkTSIGKeyUpdatedResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteTSIGKey">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="tsig_key_name" type="xsd:string"><xsd:annotation><xsd:documentation>the name of the tsig key to delete</xsd:documentation></xsd:annotation></xsd:element>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="DeleteTSIGKeyResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="Noop">
				<xsd:complexType>
					<xsd:all />
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="NoopResponse">
				<xsd:complexType>
					<xsd:all>
						<xsd:element minOccurs="1" maxOccurs="1" name="stringvalue" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>
		</xsd:schema>
	</types>

	<message name="LogicalErrorFaultMessage">
		<part element="tns:LogicalErrorFault" name="fault" />
	</message>

	<message name="InvalidParametersErrorFaultMessage">
		<part element="tns:InvalidParametersErrorFault" name="fault" />
	</message>

	<message name="SystemErrorFaultMessage">
		<part element="tns:SystemErrorFault" name="fault" />
	</message>

	<message name="InternalErrorFaultMessage">
		<part element="tns:InternalErrorFault" name="fault" />
	</message>

	<message name="AddZoneInput">
		<documentation>Add a zone to the Atomia DNS master database.</documentation>
		<part name="parameters" element="tns:AddZone"/>
	</message>

	<message name="AddZoneOutput">
		<part name="parameters" element="tns:AddZoneResponse"/>
	</message>

	<message name="DeleteZoneInput">
		<documentation>Deletes a zone from the database.</documentation>
		<part name="parameters" element="tns:DeleteZone"/>
	</message>

	<message name="DeleteZoneOutput">
		<part name="parameters" element="tns:DeleteZoneResponse"/>
	</message>

	<message name="EditZoneInput">
		<documentation>Edits a zone. This is only for completeness, and could be done by editing the SOA and NS-records directly as well.</documentation>
		<part name="parameters" element="tns:EditZone"/>
	</message>

	<message name="EditZoneOutput">
		<part name="parameters" element="tns:EditZoneResponse"/>
	</message>

	<message name="AddDnsRecordsInput">
		<documentation>Adds a list of records to a zone.</documentation>
		<part name="parameters" element="tns:AddDnsRecords"/>
	</message>

	<message name="AddDnsRecordsOutput">
		<part name="parameters" element="tns:AddDnsRecordsResponse"/>
	</message>

	<message name="EditDnsRecordsInput">
		<documentation>Changes a list of records in a zone.</documentation>
		<part name="parameters" element="tns:EditDnsRecords"/>
	</message>

	<message name="EditDnsRecordsOutput">
		<part name="parameters" element="tns:EditDnsRecordsResponse"/>
	</message>

	<message name="SetDnsRecordsInput">
		<documentation>Sets the records for all matching label/type/class-triples in a zone to that specified by the records passed.</documentation>
		<part name="parameters" element="tns:SetDnsRecords"/>
	</message>

	<message name="SetDnsRecordsOutput">
		<part name="parameters" element="tns:SetDnsRecordsResponse"/>
	</message>

	<message name="DeleteDnsRecordsInput">
		<documentation>Deletes a list of records from a zone.</documentation>
		<part name="parameters" element="tns:DeleteDnsRecords"/>
	</message>

	<message name="DeleteDnsRecordsOutput">
		<part name="parameters" element="tns:DeleteDnsRecordsResponse"/>
	</message>

	<message name="GetDnsRecordsInput">
		<documentation>Fetches a list of all records for a specified zone and label.</documentation>
		<part name="parameters" element="tns:GetDnsRecords"/>
	</message>

	<message name="GetDnsRecordsOutput">
		<part name="parameters" element="tns:GetDnsRecordsResponse"/>
	</message>

	<message name="GetLabelsInput">
		<documentation>Fetches a list of all labels for a specified zone.</documentation>
		<part name="parameters" element="tns:GetLabels"/>
	</message>

	<message name="GetLabelsOutput">
		<part name="parameters" element="tns:GetLabelsResponse"/>
	</message>

	<message name="GetZoneInput">
		<documentation>Fetches a complete zone from the database.</documentation>
		<part name="parameters" element="tns:GetZone"/>
	</message>

	<message name="GetZoneOutput">
		<part name="parameters" element="tns:GetZoneResponse"/>
	</message>

	<message name="GetZoneBulkInput">
		<documentation>Fetches a list of complete zones from the database.</documentation>
		<part name="parameters" element="tns:GetZoneBulk"/>
	</message>

	<message name="GetZoneBulkOutput">
		<part name="parameters" element="tns:GetZoneBulkResponse"/>
	</message>

	<message name="GetZoneBinaryInput">
		<documentation></documentation>
		<part name="parameters" element="tns:GetZoneBinary"/>
	</message>

	<message name="GetZoneBinaryOutput">
		<part name="parameters" element="tns:GetZoneBinaryResponse"/>
	</message>

	<message name="GetZoneMetadataInput">
		<documentation>Fetches all metadata for a zone.</documentation>
		<part name="parameters" element="tns:GetZoneMetadata"/>
	</message>

	<message name="GetZoneMetadataOutput">
		<part name="parameters" element="tns:GetZoneMetadataResponse"/>
	</message>

	<message name="SetZoneMetadataInput">
		<documentation>Sets all metadata for a zone.</documentation>
		<part name="parameters" element="tns:SetZoneMetadata"/>
	</message>

	<message name="SetZoneMetadataOutput">
		<part name="parameters" element="tns:SetZoneMetadataResponse"/>
	</message>

	<message name="RestoreZoneInput">
		<documentation>Restore a complete zone (or just set all records for some other reason).</documentation>
		<part name="parameters" element="tns:RestoreZone"/>
	</message>

	<message name="RestoreZoneOutput">
		<part name="parameters" element="tns:RestoreZoneResponse"/>
	</message>

	<message name="RestoreZoneBinaryInput">
		<documentation>Restore a complete zone (or just set all records for some other reason).</documentation>
		<part name="parameters" element="tns:RestoreZoneBinary"/>
	</message>

	<message name="RestoreZoneBinaryOutput">
		<part name="parameters" element="tns:RestoreZoneBinaryResponse"/>
	</message>

	<message name="RestoreZoneBulkInput">
		<documentation>Restore several complete zones (or just set all records for some other reason).</documentation>
		<part name="parameters" element="tns:RestoreZoneBulk"/>
	</message>

	<message name="RestoreZoneBulkOutput">
		<part name="parameters" element="tns:RestoreZoneBulkResponse"/>
	</message>

	<message name="SetDnsRecordsBulkInput">
		<documentation>Sets the records for all matching label/type/class-triples in a list of zones to that specified by the records passed.</documentation>
		<part name="parameters" element="tns:SetDnsRecordsBulk"/>
	</message>

	<message name="SetDnsRecordsBulkOutput">
		<part name="parameters" element="tns:SetDnsRecordsBulkResponse"/>
	</message>

	<message name="CopyDnsZoneBulkInput">
		<documentation>Copies a complete zone to one or more other zones, overwriting any preexisting data.</documentation>
		<part name="parameters" element="tns:CopyDnsZoneBulk"/>
	</message>

	<message name="CopyDnsZoneBulkOutput">
		<part name="parameters" element="tns:CopyDnsZoneBulkResponse"/>
	</message>

	<message name="CopyDnsLabelBulkInput">
		<documentation>Copies all records from a label in the source zone to the same label in one or more other zones, overwriting any preexisting data.</documentation>
		<part name="parameters" element="tns:CopyDnsLabelBulk"/>
	</message>

	<message name="CopyDnsLabelBulkOutput">
		<part name="parameters" element="tns:CopyDnsLabelBulkResponse"/>
	</message>

	<message name="DeleteDnsRecordsBulkInput">
		<documentation>Deletes all matching records from a list of zones. Everything except id must match for a record to be deleted.</documentation>
		<part name="parameters" element="tns:DeleteDnsRecordsBulk"/>
	</message>

	<message name="DeleteDnsRecordsBulkOutput">
		<part name="parameters" element="tns:DeleteDnsRecordsBulkResponse"/>
	</message>

	<message name="AddNameserverInput">
		<documentation>Add a nameserver as a subscriber of changes to the data set in this server.</documentation>
		<part name="parameters" element="tns:AddNameserver"/>
	</message>

	<message name="AddNameserverOutput">
		<part name="parameters" element="tns:AddNameserverResponse"/>
	</message>

	<message name="DeleteNameserverInput">
		<documentation>Remove a nameserver as a subscriber of changes to the data set in this server.</documentation>
		<part name="parameters" element="tns:DeleteNameserver"/>
	</message>

	<message name="DeleteNameserverOutput">
		<part name="parameters" element="tns:DeleteNameserverResponse"/>
	</message>

	<message name="GetNameserverInput">
		<documentation>Gets the group name that a nameserver is configured as a subscriber for.</documentation>
		<part name="parameters" element="tns:GetNameserver"/>
	</message>

	<message name="GetNameserverOutput">
		<part name="parameters" element="tns:GetNameserverResponse"/>
	</message>

	<message name="GetChangedZonesInput">
		<documentation>Fetches a list of all changed zones for a nameserver.</documentation>
		<part name="parameters" element="tns:GetChangedZones"/>
	</message>

	<message name="GetChangedZonesOutput">
		<part name="parameters" element="tns:GetChangedZonesResponse"/>
	</message>

	<message name="GetChangedZonesBatchInput">
		<documentation>Fetches a list of all changed zones for a nameserver, but limit response to a number of changes.</documentation>
		<part name="parameters" element="tns:GetChangedZonesBatch"/>
	</message>

	<message name="GetChangedZonesBatchOutput">
		<part name="parameters" element="tns:GetChangedZonesBatchResponse"/>
	</message>

	<message name="MarkUpdatedInput">
		<documentation>Mark a change-row as handled, removing it if no error occured.</documentation>
		<part name="parameters" element="tns:MarkUpdated"/>
	</message>

	<message name="MarkUpdatedOutput">
		<part name="parameters" element="tns:MarkUpdatedResponse"/>
	</message>

	<message name="MarkUpdatedBulkInput">
		<documentation>Mark a set of change-rows as handled, removing it if no error occured.</documentation>
		<part name="parameters" element="tns:MarkUpdatedBulk"/>
	</message>

	<message name="MarkUpdatedBulkOutput">
		<part name="parameters" element="tns:MarkUpdatedBulkResponse"/>
	</message>

	<message name="MarkAllUpdatedExceptInput">
		<documentation>Removes all change-rows for a zone and nameserver except the one with a specific id.</documentation>
		<part name="parameters" element="tns:MarkAllUpdatedExcept"/>
	</message>

	<message name="MarkAllUpdatedExceptOutput">
		<part name="parameters" element="tns:MarkAllUpdatedExceptResponse"/>
	</message>

	<message name="MarkAllUpdatedExceptBulkInput">
		<documentation>Removes all change-rows for an array of zones and nameserver except the ones with specific ids.</documentation>
		<part name="parameters" element="tns:MarkAllUpdatedExceptBulk"/>
	</message>

	<message name="MarkAllUpdatedExceptBulkOutput">
		<part name="parameters" element="tns:MarkAllUpdatedExceptBulkResponse"/>
	</message>

	<message name="GetAllZonesInput">
		<documentation>Get a list of all zones in the database.</documentation>
		<part name="parameters" element="tns:GetAllZones"/>
	</message>

	<message name="GetAllZonesOutput">
		<part name="parameters" element="tns:GetAllZonesResponse"/>
	</message>

	<message name="ReloadAllZonesInput">
		<documentation>Mark all zones in the database as changed.</documentation>
		<part name="parameters" element="tns:ReloadAllZones"/>
	</message>

	<message name="ReloadAllZonesOutput">
		<part name="parameters" element="tns:ReloadAllZonesResponse"/>
	</message>

	<message name="GetUpdatesDisabledInput">
		<documentation>Fetch information regarding if updates are disabled or not.</documentation>
		<part name="parameters" element="tns:GetUpdatesDisabled"/>
	</message>

	<message name="GetUpdatesDisabledOutput">
		<part name="parameters" element="tns:GetUpdatesDisabledResponse"/>
	</message>

	<message name="SetUpdatesDisabledInput">
		<documentation>Set or reset the updates disabled flag.</documentation>
		<part name="parameters" element="tns:SetUpdatesDisabled"/>
	</message>

	<message name="SetUpdatesDisabledOutput">
		<part name="parameters" element="tns:SetUpdatesDisabledResponse"/>
	</message>

	<message name="GetNameserverGroupInput">
		<documentation>Get the nameserver group for a zone.</documentation>
		<part name="parameters" element="tns:GetNameserverGroup"/>
	</message>

	<message name="GetNameserverGroupOutput">
		<part name="parameters" element="tns:GetNameserverGroupResponse"/>
	</message>

	<message name="SetNameserverGroupInput">
		<documentation>Set the nameserver group for a zone.</documentation>
		<part name="parameters" element="tns:SetNameserverGroup"/>
	</message>

	<message name="SetNameserverGroupOutput">
		<part name="parameters" element="tns:SetNameserverGroupResponse"/>
	</message>

	<message name="AddNameserverGroupInput">
		<documentation>Add a nameserver group.</documentation>
		<part name="parameters" element="tns:AddNameserverGroup"/>
	</message>

	<message name="AddNameserverGroupOutput">
		<part name="parameters" element="tns:AddNameserverGroupResponse"/>
	</message>

	<message name="DeleteNameserverGroupInput">
		<documentation>Removes an empty nameserver group.</documentation>
		<part name="parameters" element="tns:DeleteNameserverGroup"/>
	</message>

	<message name="DeleteNameserverGroupOutput">
		<part name="parameters" element="tns:DeleteNameserverGroupResponse"/>
	</message>

	<message name="AddSlaveZoneInput">
		<documentation>Adds a new slave zone.</documentation>
		<part name="parameters" element="tns:AddSlaveZone"/>
	</message>

	<message name="AddSlaveZoneOutput">
		<part name="parameters" element="tns:AddSlaveZoneResponse"/>
	</message>

	<message name="DeleteSlaveZoneInput">
		<documentation>Removes a slave zone.</documentation>
		<part name="parameters" element="tns:DeleteSlaveZone"/>
	</message>

	<message name="DeleteSlaveZoneOutput">
		<part name="parameters" element="tns:DeleteSlaveZoneResponse"/>
	</message>

	<message name="GetChangedSlaveZonesInput">
		<documentation>Fetches a list of all changed slave zones for a nameserver.</documentation>
		<part name="parameters" element="tns:GetChangedSlaveZones"/>
	</message>

	<message name="GetChangedSlaveZonesOutput">
		<part name="parameters" element="tns:GetChangedSlaveZonesResponse"/>
	</message>

	<message name="MarkSlaveZoneUpdatedInput">
		<documentation>Mark a slave zone change-row as handled, removing it if no error occured.</documentation>
		<part name="parameters" element="tns:MarkSlaveZoneUpdated"/>
	</message>

	<message name="MarkSlaveZoneUpdatedOutput">
		<part name="parameters" element="tns:MarkSlaveZoneUpdatedResponse"/>
	</message>

	<message name="GetSlaveZoneInput">
		<documentation>Fetches information about a slave zone.</documentation>
		<part name="parameters" element="tns:GetSlaveZone"/>
	</message>

	<message name="GetSlaveZoneOutput">
		<part name="parameters" element="tns:GetSlaveZoneResponse"/>
	</message>

	<message name="ReloadAllSlaveZonesInput">
		<documentation>Mark all slave zones in the database as changed.</documentation>
		<part name="parameters" element="tns:ReloadAllSlaveZones"/>
	</message>

	<message name="ReloadAllSlaveZonesOutput">
		<part name="parameters" element="tns:ReloadAllSlaveZonesResponse"/>
	</message>

	<message name="AllowZoneTransferInput">
		<documentation></documentation>
		<part name="parameters" element="tns:AllowZoneTransfer"/>
	</message>

	<message name="AllowZoneTransferOutput">
		<part name="parameters" element="tns:AllowZoneTransferResponse"/>
	</message>

	<message name="GetAllowedZoneTransferInput">
		<documentation></documentation>
		<part name="parameters" element="tns:GetAllowedZoneTransfer"/>
	</message>

	<message name="GetAllowedZoneTransferOutput">
		<part name="parameters" element="tns:GetAllowedZoneTransferResponse"/>
	</message>

	<message name="DeleteAllowedZoneTransferInput">
		<documentation></documentation>
		<part name="parameters" element="tns:DeleteAllowedZoneTransfer"/>
	</message>

	<message name="DeleteAllowedZoneTransferOutput">
		<part name="parameters" element="tns:DeleteAllowedZoneTransferResponse"/>
	</message>

	<message name="GetDNSSECKeysInput">
		<documentation>Get a list of all DNSSEC keys stored in this Atomia DNS instance.</documentation>
		<part name="parameters" element="tns:GetDNSSECKeys"/>
	</message>

	<message name="GetDNSSECKeysOutput">
		<part name="parameters" element="tns:GetDNSSECKeysResponse"/>
	</message>

	<message name="GetDNSSECKeysDSInput">
		<documentation>Get a list of generated DS records for all active KSKs stored in this Atomia DNS instance.</documentation>
		<part name="parameters" element="tns:GetDNSSECKeysDS"/>
	</message>

	<message name="GetDNSSECKeysDSOutput">
		<part name="parameters" element="tns:GetDNSSECKeysDSResponse"/>
	</message>

	<message name="GetExternalDNSSECKeysInput">
		<documentation>Get a list of all external DNSSEC keys stored in this Atomia DNS instance.</documentation>
		<part name="parameters" element="tns:GetExternalDNSSECKeys"/>
	</message>

	<message name="GetExternalDNSSECKeysOutput">
		<part name="parameters" element="tns:GetExternalDNSSECKeysResponse"/>
	</message>

	<message name="AddDNSSECKeyInput">
		<documentation>Adds a DNSSEC key to the database.</documentation>
		<part name="parameters" element="tns:AddDNSSECKey"/>
	</message>

	<message name="AddDNSSECKeyOutput">
		<part name="parameters" element="tns:AddDNSSECKeyResponse"/>
	</message>

	<message name="AddExternalDNSSECKeyInput">
		<documentation>Adds an external DNSSEC key to the database.</documentation>
		<part name="parameters" element="tns:AddExternalDNSSECKey"/>
	</message>

	<message name="AddExternalDNSSECKeyOutput">
		<part name="parameters" element="tns:AddExternalDNSSECKeyResponse"/>
	</message>

	<message name="ActivateDNSSECKeyInput">
		<documentation>Marks a DNSSEC key as activated.</documentation>
		<part name="parameters" element="tns:ActivateDNSSECKey"/>
	</message>

	<message name="ActivateDNSSECKeyOutput">
		<part name="parameters" element="tns:ActivateDNSSECKeyResponse"/>
	</message>

	<message name="DeactivateDNSSECKeyInput">
		<documentation>Marks a DNSSEC key as deactivated.</documentation>
		<part name="parameters" element="tns:DeactivateDNSSECKey"/>
	</message>

	<message name="DeactivateDNSSECKeyOutput">
		<part name="parameters" element="tns:DeactivateDNSSECKeyResponse"/>
	</message>

	<message name="DeleteDNSSECKeyInput">
		<documentation>Removes a DNSSEC key from the database.</documentation>
		<part name="parameters" element="tns:DeleteDNSSECKey"/>
	</message>

	<message name="DeleteDNSSECKeyOutput">
		<part name="parameters" element="tns:DeleteDNSSECKeyResponse"/>
	</message>

	<message name="DeleteExternalDNSSECKeyInput">
		<documentation>Removes an external DNSSEC key from the database.</documentation>
		<part name="parameters" element="tns:DeleteExternalDNSSECKey"/>
	</message>

	<message name="DeleteExternalDNSSECKeyOutput">
		<part name="parameters" element="tns:DeleteExternalDNSSECKeyResponse"/>
	</message>

	<message name="GetDNSSECZSKInfoInput">
		<documentation>Fetch the needed information about all stored ZSKs to be able to perform automated ZSK rollover.</documentation>
		<part name="parameters" element="tns:GetDNSSECZSKInfo"/>
	</message>

	<message name="GetDNSSECZSKInfoOutput">
		<part name="parameters" element="tns:GetDNSSECZSKInfoResponse"/>
	</message>

	<message name="AddAccountInput">
		<documentation>Adds an account with a specified username and password.</documentation>
		<part name="parameters" element="tns:AddAccount"/>
	</message>

	<message name="AddAccountOutput">
		<part name="parameters" element="tns:AddAccountResponse"/>
	</message>

	<message name="EditAccountInput">
		<documentation>Changes the password for an account with a specified username.</documentation>
		<part name="parameters" element="tns:EditAccount"/>
	</message>

	<message name="EditAccountOutput">
		<part name="parameters" element="tns:EditAccountResponse"/>
	</message>

	<message name="DeleteAccountInput">
		<documentation>Deletes an account.</documentation>
		<part name="parameters" element="tns:DeleteAccount"/>
	</message>

	<message name="DeleteAccountOutput">
		<part name="parameters" element="tns:DeleteAccountResponse"/>
	</message>

	<message name="GetNameserverGroupsInput">
		<documentation>Get a list of all nameserver groups.</documentation>
		<part name="parameters" element="tns:GetNameserverGroups"/>
	</message>

	<message name="GetNameserverGroupsOutput">
		<part name="parameters" element="tns:GetNameserverGroupsResponse"/>
	</message>

	<message name="FindZonesInput">
		<documentation>Search for zones in an account.</documentation>
		<part name="parameters" element="tns:FindZones"/>
	</message>

	<message name="FindZonesOutput">
		<part name="parameters" element="tns:FindZonesResponse"/>
	</message>

	<message name="AddTSIGKeyInput">
		<documentation>Adds a new TSIG key.</documentation>
		<part name="parameters" element="tns:AddTSIGKey"/>
	</message>

	<message name="AddTSIGKeyOutput">
		<part name="parameters" element="tns:AddTSIGKeyResponse"/>
	</message>

	<message name="GetChangedTSIGKeysInput">
		<documentation>Fetches a list of all changed TSIG keys for a nameserver.</documentation>
		<part name="parameters" element="tns:GetChangedTSIGKeys"/>
	</message>

	<message name="GetChangedTSIGKeysOutput">
		<part name="parameters" element="tns:GetChangedTSIGKeysResponse"/>
	</message>

	<message name="GetTSIGKeyInput">
		<documentation>Fetches information about a tsig key.</documentation>
		<part name="parameters" element="tns:GetTSIGKey"/>
	</message>

	<message name="GetTSIGKeyOutput">
		<part name="parameters" element="tns:GetTSIGKeyResponse"/>
	</message>

	<message name="MarkTSIGKeyUpdatedInput">
		<documentation>Mark a TSIG key change-row as handled, removing it if no error occured.</documentation>
		<part name="parameters" element="tns:MarkTSIGKeyUpdated"/>
	</message>

	<message name="MarkTSIGKeyUpdatedOutput">
		<part name="parameters" element="tns:MarkTSIGKeyUpdatedResponse"/>
	</message>

	<message name="DeleteTSIGKeyInput">
		<documentation>Removes a slave zone.</documentation>
		<part name="parameters" element="tns:DeleteTSIGKey"/>
	</message>

	<message name="DeleteTSIGKeyOutput">
		<part name="parameters" element="tns:DeleteTSIGKeyResponse"/>
	</message>

	<message name="NoopInput">
		<documentation>Do nothing. Meant for generating token without doing anything when authenticating.</documentation>
		<part name="parameters" element="tns:Noop"/>
	</message>

	<message name="NoopOutput">
		<part name="parameters" element="tns:NoopResponse"/>
	</message>

	<portType name="AtomiaDNSPortType">
		<operation name="AddZone">
			<input message="tns:AddZoneInput"/>
			<output message="tns:AddZoneOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeleteZone">
			<input message="tns:DeleteZoneInput"/>
			<output message="tns:DeleteZoneOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="EditZone">
			<input message="tns:EditZoneInput"/>
			<output message="tns:EditZoneOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="AddDnsRecords">
			<input message="tns:AddDnsRecordsInput"/>
			<output message="tns:AddDnsRecordsOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="EditDnsRecords">
			<input message="tns:EditDnsRecordsInput"/>
			<output message="tns:EditDnsRecordsOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="SetDnsRecords">
			<input message="tns:SetDnsRecordsInput"/>
			<output message="tns:SetDnsRecordsOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeleteDnsRecords">
			<input message="tns:DeleteDnsRecordsInput"/>
			<output message="tns:DeleteDnsRecordsOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetDnsRecords">
			<input message="tns:GetDnsRecordsInput"/>
			<output message="tns:GetDnsRecordsOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetLabels">
			<input message="tns:GetLabelsInput"/>
			<output message="tns:GetLabelsOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetZone">
			<input message="tns:GetZoneInput"/>
			<output message="tns:GetZoneOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetZoneBulk">
			<input message="tns:GetZoneBulkInput"/>
			<output message="tns:GetZoneBulkOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetZoneBinary">
			<input message="tns:GetZoneBinaryInput"/>
			<output message="tns:GetZoneBinaryOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetZoneMetadata">
			<input message="tns:GetZoneMetadataInput"/>
			<output message="tns:GetZoneMetadataOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="SetZoneMetadata">
			<input message="tns:SetZoneMetadataInput"/>
			<output message="tns:SetZoneMetadataOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="RestoreZone">
			<input message="tns:RestoreZoneInput"/>
			<output message="tns:RestoreZoneOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="RestoreZoneBinary">
			<input message="tns:RestoreZoneBinaryInput"/>
			<output message="tns:RestoreZoneBinaryOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="RestoreZoneBulk">
			<input message="tns:RestoreZoneBulkInput"/>
			<output message="tns:RestoreZoneBulkOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="SetDnsRecordsBulk">
			<input message="tns:SetDnsRecordsBulkInput"/>
			<output message="tns:SetDnsRecordsBulkOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="CopyDnsZoneBulk">
			<input message="tns:CopyDnsZoneBulkInput"/>
			<output message="tns:CopyDnsZoneBulkOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="CopyDnsLabelBulk">
			<input message="tns:CopyDnsLabelBulkInput"/>
			<output message="tns:CopyDnsLabelBulkOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeleteDnsRecordsBulk">
			<input message="tns:DeleteDnsRecordsBulkInput"/>
			<output message="tns:DeleteDnsRecordsBulkOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="AddNameserver">
			<input message="tns:AddNameserverInput"/>
			<output message="tns:AddNameserverOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeleteNameserver">
			<input message="tns:DeleteNameserverInput"/>
			<output message="tns:DeleteNameserverOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetNameserver">
			<input message="tns:GetNameserverInput"/>
			<output message="tns:GetNameserverOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetChangedZones">
			<input message="tns:GetChangedZonesInput"/>
			<output message="tns:GetChangedZonesOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetChangedZonesBatch">
			<input message="tns:GetChangedZonesBatchInput"/>
			<output message="tns:GetChangedZonesBatchOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="MarkUpdated">
			<input message="tns:MarkUpdatedInput"/>
			<output message="tns:MarkUpdatedOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="MarkUpdatedBulk">
			<input message="tns:MarkUpdatedBulkInput"/>
			<output message="tns:MarkUpdatedBulkOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="MarkAllUpdatedExcept">
			<input message="tns:MarkAllUpdatedExceptInput"/>
			<output message="tns:MarkAllUpdatedExceptOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="MarkAllUpdatedExceptBulk">
			<input message="tns:MarkAllUpdatedExceptBulkInput"/>
			<output message="tns:MarkAllUpdatedExceptBulkOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetAllZones">
			<input message="tns:GetAllZonesInput"/>
			<output message="tns:GetAllZonesOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="ReloadAllZones">
			<input message="tns:ReloadAllZonesInput"/>
			<output message="tns:ReloadAllZonesOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetUpdatesDisabled">
			<input message="tns:GetUpdatesDisabledInput"/>
			<output message="tns:GetUpdatesDisabledOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="SetUpdatesDisabled">
			<input message="tns:SetUpdatesDisabledInput"/>
			<output message="tns:SetUpdatesDisabledOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetNameserverGroup">
			<input message="tns:GetNameserverGroupInput"/>
			<output message="tns:GetNameserverGroupOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="SetNameserverGroup">
			<input message="tns:SetNameserverGroupInput"/>
			<output message="tns:SetNameserverGroupOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="AddNameserverGroup">
			<input message="tns:AddNameserverGroupInput"/>
			<output message="tns:AddNameserverGroupOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeleteNameserverGroup">
			<input message="tns:DeleteNameserverGroupInput"/>
			<output message="tns:DeleteNameserverGroupOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="AddSlaveZone">
			<input message="tns:AddSlaveZoneInput"/>
			<output message="tns:AddSlaveZoneOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeleteSlaveZone">
			<input message="tns:DeleteSlaveZoneInput"/>
			<output message="tns:DeleteSlaveZoneOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetChangedSlaveZones">
			<input message="tns:GetChangedSlaveZonesInput"/>
			<output message="tns:GetChangedSlaveZonesOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="MarkSlaveZoneUpdated">
			<input message="tns:MarkSlaveZoneUpdatedInput"/>
			<output message="tns:MarkSlaveZoneUpdatedOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetSlaveZone">
			<input message="tns:GetSlaveZoneInput"/>
			<output message="tns:GetSlaveZoneOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="ReloadAllSlaveZones">
			<input message="tns:ReloadAllSlaveZonesInput"/>
			<output message="tns:ReloadAllSlaveZonesOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="AllowZoneTransfer">
			<input message="tns:AllowZoneTransferInput"/>
			<output message="tns:AllowZoneTransferOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetAllowedZoneTransfer">
			<input message="tns:GetAllowedZoneTransferInput"/>
			<output message="tns:GetAllowedZoneTransferOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeleteAllowedZoneTransfer">
			<input message="tns:DeleteAllowedZoneTransferInput"/>
			<output message="tns:DeleteAllowedZoneTransferOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetDNSSECKeys">
			<input message="tns:GetDNSSECKeysInput"/>
			<output message="tns:GetDNSSECKeysOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetDNSSECKeysDS">
			<input message="tns:GetDNSSECKeysDSInput"/>
			<output message="tns:GetDNSSECKeysDSOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetExternalDNSSECKeys">
			<input message="tns:GetExternalDNSSECKeysInput"/>
			<output message="tns:GetExternalDNSSECKeysOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="AddDNSSECKey">
			<input message="tns:AddDNSSECKeyInput"/>
			<output message="tns:AddDNSSECKeyOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="AddExternalDNSSECKey">
			<input message="tns:AddExternalDNSSECKeyInput"/>
			<output message="tns:AddExternalDNSSECKeyOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="ActivateDNSSECKey">
			<input message="tns:ActivateDNSSECKeyInput"/>
			<output message="tns:ActivateDNSSECKeyOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeactivateDNSSECKey">
			<input message="tns:DeactivateDNSSECKeyInput"/>
			<output message="tns:DeactivateDNSSECKeyOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeleteDNSSECKey">
			<input message="tns:DeleteDNSSECKeyInput"/>
			<output message="tns:DeleteDNSSECKeyOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeleteExternalDNSSECKey">
			<input message="tns:DeleteExternalDNSSECKeyInput"/>
			<output message="tns:DeleteExternalDNSSECKeyOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetDNSSECZSKInfo">
			<input message="tns:GetDNSSECZSKInfoInput"/>
			<output message="tns:GetDNSSECZSKInfoOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="AddAccount">
			<input message="tns:AddAccountInput"/>
			<output message="tns:AddAccountOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="EditAccount">
			<input message="tns:EditAccountInput"/>
			<output message="tns:EditAccountOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeleteAccount">
			<input message="tns:DeleteAccountInput"/>
			<output message="tns:DeleteAccountOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetNameserverGroups">
			<input message="tns:GetNameserverGroupsInput"/>
			<output message="tns:GetNameserverGroupsOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="FindZones">
			<input message="tns:FindZonesInput"/>
			<output message="tns:FindZonesOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="AddTSIGKey">
			<input message="tns:AddTSIGKeyInput"/>
			<output message="tns:AddTSIGKeyOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetChangedTSIGKeys">
			<input message="tns:GetChangedTSIGKeysInput"/>
			<output message="tns:GetChangedTSIGKeysOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="GetTSIGKey">
			<input message="tns:GetTSIGKeyInput"/>
			<output message="tns:GetTSIGKeyOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="MarkTSIGKeyUpdated">
			<input message="tns:MarkTSIGKeyUpdatedInput"/>
			<output message="tns:MarkTSIGKeyUpdatedOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="DeleteTSIGKey">
			<input message="tns:DeleteTSIGKeyInput"/>
			<output message="tns:DeleteTSIGKeyOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>

		<operation name="Noop">
			<input message="tns:NoopInput"/>
			<output message="tns:NoopOutput"/>
			<fault message="tns:LogicalErrorFaultMessage" name="LogicalErrorFault" />
			<fault message="tns:InvalidParametersErrorFaultMessage" name="InvalidParametersErrorFault" />
			<fault message="tns:SystemErrorFaultMessage" name="SystemErrorFault" />
			<fault message="tns:InternalErrorFaultMessage" name="InternalErrorFault" />
		</operation>
	</portType>

	<binding name="AtomiaDNSSoapBinding" type="tns:AtomiaDNSPortType">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

		<operation name="AddZone">
			<documentation>Add a zone to the Atomia DNS master database.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#AddZone"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeleteZone">
			<documentation>Deletes a zone from the database.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeleteZone"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="EditZone">
			<documentation>Edits a zone. This is only for completeness, and could be done by editing the SOA and NS-records directly as well.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#EditZone"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="AddDnsRecords">
			<documentation>Adds a list of records to a zone.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#AddDnsRecords"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="EditDnsRecords">
			<documentation>Changes a list of records in a zone.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#EditDnsRecords"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="SetDnsRecords">
			<documentation>Sets the records for all matching label/type/class-triples in a zone to that specified by the records passed.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#SetDnsRecords"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeleteDnsRecords">
			<documentation>Deletes a list of records from a zone.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeleteDnsRecords"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetDnsRecords">
			<documentation>Fetches a list of all records for a specified zone and label.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetDnsRecords"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetLabels">
			<documentation>Fetches a list of all labels for a specified zone.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetLabels"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetZone">
			<documentation>Fetches a complete zone from the database.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetZone"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetZoneBulk">
			<documentation>Fetches a list of complete zones from the database.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetZoneBulk"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetZoneBinary">
			<documentation></documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetZoneBinary"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetZoneMetadata">
			<documentation>Fetches all metadata for a zone.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetZoneMetadata"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="SetZoneMetadata">
			<documentation>Sets all metadata for a zone.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#SetZoneMetadata"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="RestoreZone">
			<documentation>Restore a complete zone (or just set all records for some other reason).</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#RestoreZone"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="RestoreZoneBinary">
			<documentation>Restore a complete zone (or just set all records for some other reason).</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#RestoreZoneBinary"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="RestoreZoneBulk">
			<documentation>Restore several complete zones (or just set all records for some other reason).</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#RestoreZoneBulk"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="SetDnsRecordsBulk">
			<documentation>Sets the records for all matching label/type/class-triples in a list of zones to that specified by the records passed.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#SetDnsRecordsBulk"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="CopyDnsZoneBulk">
			<documentation>Copies a complete zone to one or more other zones, overwriting any preexisting data.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#CopyDnsZoneBulk"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="CopyDnsLabelBulk">
			<documentation>Copies all records from a label in the source zone to the same label in one or more other zones, overwriting any preexisting data.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#CopyDnsLabelBulk"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeleteDnsRecordsBulk">
			<documentation>Deletes all matching records from a list of zones. Everything except id must match for a record to be deleted.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeleteDnsRecordsBulk"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="AddNameserver">
			<documentation>Add a nameserver as a subscriber of changes to the data set in this server.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#AddNameserver"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeleteNameserver">
			<documentation>Remove a nameserver as a subscriber of changes to the data set in this server.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeleteNameserver"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetNameserver">
			<documentation>Gets the group name that a nameserver is configured as a subscriber for.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetNameserver"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetChangedZones">
			<documentation>Fetches a list of all changed zones for a nameserver.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetChangedZones"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetChangedZonesBatch">
			<documentation>Fetches a list of all changed zones for a nameserver, but limit response to a number of changes.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetChangedZonesBatch"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="MarkUpdated">
			<documentation>Mark a change-row as handled, removing it if no error occured.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#MarkUpdated"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="MarkUpdatedBulk">
			<documentation>Mark a set of change-rows as handled, removing it if no error occured.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#MarkUpdatedBulk"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="MarkAllUpdatedExcept">
			<documentation>Removes all change-rows for a zone and nameserver except the one with a specific id.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#MarkAllUpdatedExcept"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="MarkAllUpdatedExceptBulk">
			<documentation>Removes all change-rows for an array of zones and nameserver except the ones with specific ids.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#MarkAllUpdatedExceptBulk"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetAllZones">
			<documentation>Get a list of all zones in the database.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetAllZones"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="ReloadAllZones">
			<documentation>Mark all zones in the database as changed.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#ReloadAllZones"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetUpdatesDisabled">
			<documentation>Fetch information regarding if updates are disabled or not.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetUpdatesDisabled"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="SetUpdatesDisabled">
			<documentation>Set or reset the updates disabled flag.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#SetUpdatesDisabled"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetNameserverGroup">
			<documentation>Get the nameserver group for a zone.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetNameserverGroup"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="SetNameserverGroup">
			<documentation>Set the nameserver group for a zone.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#SetNameserverGroup"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="AddNameserverGroup">
			<documentation>Add a nameserver group.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#AddNameserverGroup"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeleteNameserverGroup">
			<documentation>Removes an empty nameserver group.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeleteNameserverGroup"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="AddSlaveZone">
			<documentation>Adds a new slave zone.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#AddSlaveZone"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeleteSlaveZone">
			<documentation>Removes a slave zone.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeleteSlaveZone"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetChangedSlaveZones">
			<documentation>Fetches a list of all changed slave zones for a nameserver.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetChangedSlaveZones"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="MarkSlaveZoneUpdated">
			<documentation>Mark a slave zone change-row as handled, removing it if no error occured.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#MarkSlaveZoneUpdated"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetSlaveZone">
			<documentation>Fetches information about a slave zone.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetSlaveZone"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="ReloadAllSlaveZones">
			<documentation>Mark all slave zones in the database as changed.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#ReloadAllSlaveZones"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="AllowZoneTransfer">
			<documentation></documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#AllowZoneTransfer"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetAllowedZoneTransfer">
			<documentation></documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetAllowedZoneTransfer"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeleteAllowedZoneTransfer">
			<documentation></documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeleteAllowedZoneTransfer"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetDNSSECKeys">
			<documentation>Get a list of all DNSSEC keys stored in this Atomia DNS instance.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetDNSSECKeys"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetDNSSECKeysDS">
			<documentation>Get a list of generated DS records for all active KSKs stored in this Atomia DNS instance.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetDNSSECKeysDS"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetExternalDNSSECKeys">
			<documentation>Get a list of all external DNSSEC keys stored in this Atomia DNS instance.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetExternalDNSSECKeys"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="AddDNSSECKey">
			<documentation>Adds a DNSSEC key to the database.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#AddDNSSECKey"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="AddExternalDNSSECKey">
			<documentation>Adds an external DNSSEC key to the database.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#AddExternalDNSSECKey"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="ActivateDNSSECKey">
			<documentation>Marks a DNSSEC key as activated.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#ActivateDNSSECKey"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeactivateDNSSECKey">
			<documentation>Marks a DNSSEC key as deactivated.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeactivateDNSSECKey"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeleteDNSSECKey">
			<documentation>Removes a DNSSEC key from the database.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeleteDNSSECKey"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeleteExternalDNSSECKey">
			<documentation>Removes an external DNSSEC key from the database.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeleteExternalDNSSECKey"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetDNSSECZSKInfo">
			<documentation>Fetch the needed information about all stored ZSKs to be able to perform automated ZSK rollover.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetDNSSECZSKInfo"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="AddAccount">
			<documentation>Adds an account with a specified username and password.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#AddAccount"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="EditAccount">
			<documentation>Changes the password for an account with a specified username.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#EditAccount"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeleteAccount">
			<documentation>Deletes an account.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeleteAccount"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetNameserverGroups">
			<documentation>Get a list of all nameserver groups.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetNameserverGroups"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="FindZones">
			<documentation>Search for zones in an account.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#FindZones"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="AddTSIGKey">
			<documentation>Testing.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#AddTSIGKey"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetChangedTSIGKeys">
			<documentation>Fetches a list of all changed TSIG keys for a nameserver.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetChangedTSIGKeys"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="GetTSIGKey">
			<documentation>Fetches information about a tsig key.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#GetTSIGKey"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="MarkTSIGKeyUpdated">
			<documentation>Mark a slave zone change-row as handled, removing it if no error occured.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#MarkTSIGKeyUpdated"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="DeleteTSIGKey">
			<documentation>Removes a TSIG key.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#DeleteTSIGKey"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>

		<operation name="Noop">
			<documentation>Do nothing. Meant for generating token without doing anything when authenticating.</documentation>
			<soap:operation soapAction="urn:Atomia::DNS::Server#Noop"/>
			<input><soap:body use="literal"/></input>
			<output><soap:body use="literal"/></output>
			<fault name="LogicalErrorFault"><soap:fault name="LogicalErrorFault" use="literal" /></fault>
			<fault name="InvalidParametersErrorFault"><soap:fault name="InvalidParametersErrorFault" use="literal" /></fault>
			<fault name="SystemErrorFault"><soap:fault name="SystemErrorFault" use="literal" /></fault>
			<fault name="InternalErrorFault"><soap:fault name="InternalErrorFault" use="literal" /></fault>
		</operation>
	</binding>

	<service name="AtomiaDNSService">
		<documentation>Atomia DNS Soap server</documentation>
		<port name="AtomiaDNSPort" binding="tns:AtomiaDNSSoapBinding">
			<soap:address location="http://atomiadns.soap.server/atomiadns"/>
		</port>
	</service>
</definitions>
