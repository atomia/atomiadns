#!/usr/bin/perl -w

use strict;
use warnings;

use Data::Dumper;
use Getopt::Long;
use Pod::Usage;
use Config::General;
use Net::DNS::Zone::Parser;

my $config_file = "/etc/atomiadns.conf";
my $soap_uri = undef;
my $soap_cacert = undef;
my $soap_username = undef;
my $soap_password = undef;
my $zones = undef;
my $nsgroup = undef;
my $verbose = 0;
my $help = undef;

if (-f "$config_file") {
	my $conf = new Config::General($config_file);
	die("config file found at $config_file but it is unreadable" ) unless defined($conf);
	my %config = $conf->getall;
	$soap_uri = $config{"soap_uri"};
	$soap_cacert = $config{"soap_cacert"};
	$soap_username = $config{"soap_username"};
	$soap_password = $config{"soap_password"};
}

GetOptions (	"uri=s" => \$soap_uri,
		"help|?" => \$help,
		"zone=s@" => \$zones,
		"nsgroup=s" => \$nsgroup,
		"verbose|v" => \$verbose) || pod2usage(0);
pod2usage(-verbose => 1) if $help;
pod2usage(-verbose => 0) unless defined($soap_uri) && $soap_uri =~ /^http/ && defined($zones) && ref($zones) eq "ARRAY" && defined($nsgroup);
map { do { print "Bad zone format in $_\n"; pod2usage(-verbose => 0) } unless /^[a-z0-9.-]+:(.*)$/ && -f $1 } @$zones;

if ($soap_uri =~ /^https/) {
	die "with https as the transport you need to include the location of the CA cert in the soap_cacert config-file option in /etc/atomiadns.conf" unless defined($soap_cacert) && -f $soap_cacert;
	$ENV{HTTPS_CA_FILE} = $soap_cacert;
}

if ($verbose) {
	eval 'use SOAP::Lite +trace => [ "debug" ];';
} else {
	eval 'use SOAP::Lite;';
}

my $soap = SOAP::Lite
	->  uri('urn:Atomia::DNS::Server')
	->  proxy($soap_uri)
	->  on_fault(sub {
			my($soap, $res) = @_;
			die "got fault of type " . (ref $res ? $res->faultcode  : "transport") . ": " . (ref $res ? $res->faultstring : $soap->transport->status) . "\n";
		});

if (defined($soap_username)) {
	$soap->transport->http_request->header('X-Auth-Username' => $soap_username);
	$soap->transport->http_request->header('X-Auth-Password' => $soap_password);
}

my $origins = [];
my $binary_zones = [];
foreach $_ (@$zones) {
	if (/^([a-z0-9.-]+):(.*)$/) {
		my $zone_origin = $1;
		my $zone_file = $2;

		$zone_origin =~ s/\.$//;

		my $parser = Net::DNS::Zone::Parser->new;
		my $parseerror = $parser->read($zone_file, { ORIGIN => $zone_origin, CREATE_RR => 1 });
		die "Error parsing $zone_file: $parseerror" if $parseerror;

		my $parsed_zone = $parser->get_array;

		my $zone = "";
		foreach my $record (@$parsed_zone) {
			my $label = atomia_host_to_label($record->name, $zone_origin);

			my $rdata;
			if ($record->type eq "SOA") {
				$rdata = sprintf "%s. %s. %%serial %d %d %d %d", $record->mname, $record->rname, $record->refresh, $record->retry, $record->expire, $record->minimum;
			} else {
				$rdata = $record->rdatastr;
			}

			$zone .= sprintf "%s IN %d %s %s\n", $label, $record->ttl, $record->type, $rdata;
		}

		chomp($zone);

		push @$origins, $zone_origin;
		push @$binary_zones, $zone;
	} else {
		die "invalid format of --zone, should be ORIGIN:ZONEFILE";
	}
}

#print Dumper($origins, $binary_zones);
$soap->RestoreZoneBulk($origins, $nsgroup, $binary_zones);
exit 0;

sub atomia_host_to_label {
        my $name = shift;
        my $zone = shift;

        if ($name eq $zone) {
                return '@';
        } else {
                die("atomia_host_to_label called when name not in zone") unless $name =~ /$zone$/;
                return substr($name, 0, length($name) - length($zone) - 1);
        }
}

=encoding utf8

=head1 NAME

atomiadns_zoneimport - An application for administering a Atomia DNS installation

=head1 SYNOPSIS

=over 8

=item atomiadns_zoneimport [--uri SOAP_URI] --zone ORIGIN:PATH --nsgroup NAMESERVERGROUP [-v] [--help]

=back

=head1 DESCRIPTION

=head1 OPTIONS

=over 8

=item --uri SOAP_URI

Specifies the URL of the Atomia DNS Master server to import zones to.

=item --zone ORIGIN:PATH

Specifies the zone origin and path of the zonefile to import.

=item --nsgroup NAMESERVERGROUP

Specifies the nameservergroup to import the zone to.

=item --verbose

Output a trace of what is done.

=item --help

Displays the synopsis and documentation for individual options.

=back

=head1 CONFIGURATION

The application is configured using a optional config file stored at /etc/atomiadns.conf.

The following options exist:

=over 8

=item soap_uri

Specifies the URI of the SOAP Server to administer zones using.

=back

=head1 EXAMPLES

atomiadns_zoneimport --uri http://some.soap.server/atomiadns --origin somezone.com --zonefile master/somezone.conf

=head1 AUTHOR

Atomia DNS was developed by Atomia AB. For support, please see http://www.atomia.com/.

=cut
